openapi: 3.0.0
info:
  title: DIXA API
  description: 'Proyecto DIXA API, gestión de documentación'
  version: 0.0.1
servers:
  - url: 'http://localhost:8000/api/v1'
    description: Servidor local
  - url: 'http://api.qa-dixa.puller.mx/api/v1'
    description: Servidor de qa
  - url: 'http://staging-dixa.puller.mx/api/v1'
    description: Servidor de staging
paths:
  /login:
    post:
      tags:
        - Auth
      security: []
      summary: Login of user
      operationId: login
      description: user login for the platform
      requestBody:
        description: Structure of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Request in json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /logout:
    post:
      tags:
        - Auth
      summary: Logout of user
      operationId: logout
      description: removes the token of the user making the request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /account:
    get:
      tags:
        - Users
      summary: Account
      operationId: account
      description: user information for the currently authenticated platform
      responses:
        '200':
          description: Basic structure of response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /users:
    get:
      tags:
        - Users
      summary: List - Users
      operationId: getUsers
      description: Get the list of all users in a single request
      parameters:
        - $ref: '#/components/parameters/nombre'
        - $ref: '#/components/parameters/role'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Users
      summary: Create - Users
      operationId: createUsers
      description: create a user in the system
      requestBody:
        description: Request in json format
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserMultipart'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/users/{user_id}':
    get:
      tags:
        - Users
      summary: Get - Users
      operationId: getUser
      description: Get the user in a single request
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /users/search:
    get:
      tags:
        - Users
      summary: search - Users
      operationId: searchUsers
      description: filter users with pagination included
      parameters:
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/nombre'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/sortBy'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /roles:
    get:
      tags:
        - Roles
      summary: List - Roles
      operationId: getRoles
      description: Get the list of all roles in a single request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/roles/{role_id}':
    get:
      tags:
        - Roles
      summary: Get - Role
      operationId: getRole
      description: Get the role in a single request
      parameters:
        - $ref: '#/components/parameters/roleId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /departments:
    get:
      tags:
        - Departments
      summary: List - Departments
      operationId: getDepartments
      description: Get the list of all departments in a single request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/departments/{department_id}':
    get:
      tags:
        - Departments
      summary: Get - Department
      operationId: getDepartment
      description: Get the department in a single request
      parameters:
        - $ref: '#/components/parameters/departmentId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Department'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: email@puller.mx
        password:
          type: string
          format: password
          example: password
      required:
        - email
        - password
    Auth:
      type: object
      properties:
        access_token:
          type: string
          example: AS599879879sa87d98a7sd987ae7987a9
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: Ok
        success:
          type: boolean
          example: true
    Account:
      type: object
      properties:
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            roles:
              type: array
              items:
                type: string
              example:
                - Administrador
            permissions:
              type: object
              properties:
                nombre.permiso:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
            views:
              type: object
              properties:
                nombre.permiso.vista:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    path:
                      type: string
                      example: /dashboard
        message:
          type: string
          example: Ok
        success:
          type: boolean
          example: true
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: correo@puller.mx
        email_verified_at:
          type: string
          example: '2020-01-01 12:00:00'
        nombre:
          type: string
          example: John
        paterno:
          type: string
          example: Doe
        materno:
          type: string
          example: Roblox
        celular:
          type: string
          example: 55 54 89 67 87
        password:
          type: string
          format: password
          example: C0ntr4s3n14
        imagen:
          type: string
          format: url
          example: 'https://s3.amazon/profile/46798a7fsd98f79asd8f7'
        role:
          $ref: '#/components/schemas/Role'
        departamento:
          $ref: '#/components/schemas/Department'
    UserMultipart:
      type: object
      properties:
        email:
          type: string
          format: email
          example: correo@puller.mx
        nombre:
          type: string
          example: John
        paterno:
          type: string
          example: Doe
        materno:
          type: string
          example: Roblox
        celular:
          type: string
          example: 55 54 89 67 87
        password:
          type: string
          format: password
          example: C0ntr4s3n14
        imagen_file:
          type: string
          format: binary
          nullable: true
        role_id:
          type: integer
          example: 1
        departamento_id:
          type: integer
          nullable: true
          example: 1
      required:
        - email
        - nombre
        - paterno
        - materno
        - celular
        - password
        - role_id
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jefe de departamento
    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ordenes de pago
  parameters:
    userId:
      name: user_id
      in: path
      description: user id
      schema:
        type: integer
      required: true
    roleId:
      name: role_id
      in: path
      description: role id
      schema:
        type: integer
      required: true
    departmentId:
      name: department_id
      in: path
      description: department id
      schema:
        type: integer
      required: true
    page:
      in: query
      name: page
      description: pagina a consultar
      required: false
      schema:
        type: integer
        example: 1
    order:
      in: query
      name: order
      description: 'tipo de ordenamiento, descendente o ascendente'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
    sortBy:
      in: query
      name: sortBy
      description: campo por el cual se desea ordenar
      required: false
      schema:
        type: string
        example: nombre
    perPage:
      in: query
      name: perPage
      description: cantidad de items que quieres que devuelva la respuesta
      required: false
      schema:
        type: integer
        example: 20
    role:
      in: query
      name: role
      description: (id del rol) Valor para filtrar el tipo de rol de los usuarios
      required: false
      schema:
        type: integer
        example: 1
    nombre:
      in: query
      name: nombre
      description: Valor para filtrar por nombre completo de usuario
      required: false
      schema:
        type: string
        example: John Doe
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '400':
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Bad Request
              success:
                type: boolean
                example: false
    '401':
      description: unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Unauthorized
              success:
                type: boolean
                example: false
    '403':
      description: Not authorized
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Forbidden
              success:
                type: boolean
                example: false
    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: Registro no encontrado
              success:
                type: boolean
                example: false
    '422':
      description: Error validation
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: El campo key_name es obligatorio
              success:
                type: boolean
                example: false
    '500':
      description: server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Error del servidor
              success:
                type: boolean
                example: false
security:
  - bearerAuth: []
