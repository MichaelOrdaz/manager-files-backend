openapi: 3.0.0
info:
  title: DIXA API
  description: 'Project DIXA API, documentation management'
  version: 0.0.1
servers:
  - url: 'http://localhost:8000/api/v1'
    description: Servidor local
  - url: 'http://api.qa-dixa.puller.mx/api/v1'
    description: Servidor de qa
  - url: 'http://staging-dixa.puller.mx/api/v1'
    description: Servidor de staging
paths:
  /login:
    post:
      tags:
        - Auth
      security: []
      summary: Login of user
      operationId: login
      description: user login for the platform
      requestBody:
        description: Structure of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Request in json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /logout:
    post:
      tags:
        - Auth
      summary: Logout of user
      operationId: logout
      description: removes the token of the user making the request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /verify-auth:
    get:
      tags:
        - Auth
      summary: Verify Auth
      operationId: verifyAuth
      description: verify that the user is still authenticated
      responses:
        '200':
          description: Basic structure of response
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuth:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /account:
    get:
      tags:
        - Users
      summary: Account
      operationId: account
      description: user information for the currently authenticated platform
      responses:
        '200':
          description: Basic structure of response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/admin/users/{user_id}/reset-password':
    post:
      tags:
        - Admin
      summary: Reset Password - User
      operationId: resetPasswordUser
      description: update password of user in the system from role admin
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Request in json format
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  format: password
                  example: newPassword
                new_password_confirmation:
                  type: string
                  format: password
                  example: newPassword
              required:
                - new_password
                - new_password_confirmation
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /users:
    get:
      tags:
        - Users
      summary: List - Users
      operationId: getUsers
      description: Get the list of all users in a single request
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/role'
        - name: department_id
          in: query
          description: department id
          schema:
            type: integer
            nullable: true
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Users
      summary: Create - Users
      operationId: createUsers
      description: create a user in the system
      requestBody:
        description: Request in multipart/form-data format
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserMultipartCreate'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/users/{user_id}':
    get:
      tags:
        - Users
      summary: Get - Users
      operationId: getUser
      description: Get the user in a single request
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Users
      summary: Update - User
      operationId: updateUser
      description: update a user in the system
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Request in multipart/form-data format
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserMultipartUpdate'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      tags:
        - Users
      summary: Delete - User
      operationId: deleteUser
      description: delete a user in the system
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/users/{user_id}/change-password':
    post:
      tags:
        - Users
      summary: Change Password - User
      operationId: changePasswordUser
      description: update password of user in the system
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Request in json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /users/image:
    post:
      tags:
        - Users
      summary: Update - image user
      operationId: updateImageUser
      description: update image the user authenticate
      requestBody:
        description: Request in json format
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      tags:
        - Users
      summary: Delete - imagen user
      operationId: deleteImageUser
      description: remove image avatar the user authenticate
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /users/search:
    get:
      tags:
        - Users
      summary: Search - Users
      operationId: searchUsers
      description: filter users with pagination included
      parameters:
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/sortBy'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /roles:
    get:
      tags:
        - Roles
      summary: List - Roles
      operationId: getRoles
      description: Get the list of all roles in a single request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/roles/{role_id}':
    get:
      tags:
        - Roles
      summary: Get - Role
      operationId: getRole
      description: Get the role in a single request
      parameters:
        - $ref: '#/components/parameters/roleId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /departments:
    get:
      tags:
        - Departments
      summary: List - Departments
      operationId: getDepartments
      description: Get the list of all departments in a single request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/departments/{department_id}':
    get:
      tags:
        - Departments
      summary: Get - Department
      operationId: getDepartment
      description: Get the department in a single request
      parameters:
        - $ref: '#/components/parameters/departmentId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Department'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /documents:
    get:
      tags:
        - Documents
      summary: List - Documents
      operationId: getDocuments
      description: Get the list of all documents in a single request
      parameters:
        - $ref: '#/components/parameters/parent'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentSimple'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Documents
      summary: Create - File
      operationId: createFile
      description: create a document in the system
      requestBody:
        description: Request in format json format
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileMultipartCreate'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Document'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/documents/{document_id}':
    get:
      tags:
        - Documents
      summary: Get - Document
      operationId: getDocument
      description: Get the document in a single request
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Document'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      tags:
        - Documents
      summary: Delete - Document
      operationId: deleteDocument
      description: Delete the document in a single request
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentSimple'
                  total:
                    type: integer
                    example: 5
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /folders:
    post:
      tags:
        - Documents
      summary: Create - Folder
      operationId: createDocumentFolder
      description: create a folder in the system
      requestBody:
        description: Request in format json format
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Document'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /share-permissions:
    get:
      tags:
        - Share Document
      summary: List - Share Document Permissions
      operationId: listShareDocumentPermissions
      description: Get the list of all permission to share document in a single request
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShareDocumentPermission'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/documents/{document_id}/:rename':
    post:
      tags:
        - Documents
      summary: Rename - Document
      operationId: renameDocument
      description: Rename the document in a single request
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        description: Request in format json format
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: document name
              required:
                - name
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Document'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/share-documents/{document_id}/users':
    get:
      tags:
        - Share Document User
      summary: List - Users
      operationId: listUsers
      description: Obtains a list of users with the permissions they have to access the consulted document
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserWithPermissionDocument'
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Share Document User
      summary: Save - Users of document share
      operationId: saveUsersOfDocument
      description: save of list of users with the permissions they have to access the consulted document
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        description: Request in application/json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSharePermissionByDocument'
      responses:
        '200':
          description: Basic structure of the response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      attached:
                        type: array
                        items:
                          type: integer
                        example:
                          - 1
                          - 2
                          - 3
                      detached:
                        type: array
                        items:
                          type: integer
                        example:
                          - 1
                          - 2
                          - 3
                      updated:
                        type: array
                        items:
                          type: integer
                        example:
                          - 1
                          - 2
                          - 3
                  message:
                    type: string
                    example: Ok
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: email@puller.mx
        password:
          type: string
          format: password
          example: password
      required:
        - email
        - password
    Auth:
      type: object
      properties:
        access_token:
          type: string
          example: AS599879879sa87d98a7sd987ae7987a9
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: Ok
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: string
          example:
            - access_token
            - user
    Account:
      type: object
      properties:
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            roles:
              type: array
              items:
                type: string
              example:
                - Administrador
            permissions:
              type: object
              properties:
                name.permission:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
            views:
              type: object
              properties:
                name.permission.view:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    path:
                      type: string
                      example: /dashboard
        message:
          type: string
          example: Ok
        success:
          type: boolean
          example: true
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: correo@puller.mx
        email_verified_at:
          type: string
          example: '2020-01-01 12:00:00'
        name:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        second_lastname:
          type: string
          example: Roblox
        phone:
          type: string
          example: 55 54 89 67 87
        password:
          type: string
          format: password
          example: C0ntr4s3n14
        image:
          type: string
          format: url
          example: 'https://s3.amazon/profile/46798a7fsd98f79asd8f7'
        role:
          $ref: '#/components/schemas/Role'
        department:
          $ref: '#/components/schemas/Department'
    UserMultipartCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          example: correo@puller.mx
        name:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        second_lastname:
          type: string
          example: Roblox
        phone:
          type: string
          example: 55 54 89 67 87
        password:
          type: string
          format: password
          example: C0ntr4s3n14
        image_file:
          type: string
          format: binary
          nullable: true
        role_id:
          type: integer
          example: 1
        department_id:
          type: integer
          nullable: true
          example: 1
      required:
        - email
        - name
        - lastname
        - second_lastname
        - phone
        - password
        - role_id
    UserMultipartUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          example: correo@puller.mx
        name:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        second_lastname:
          type: string
          example: Roblox
        phone:
          type: string
          example: 55 54 89 67 87
        password:
          type: string
          format: password
          example: C0ntr4s3n14
        image_file:
          type: string
          format: binary
          nullable: true
        role_id:
          type: integer
          example: 1
        department_id:
          type: integer
          nullable: true
          example: 1
      required:
        - email
        - name
        - lastname
        - second_lastname
        - phone
        - role_id
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jefe de departamento
    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ordenes de pago
    UpdatePassword:
      type: object
      properties:
        password:
          type: string
          format: password
          example: currentPass
        password_confirmation:
          type: string
          format: password
          example: currentPass
        new_password:
          type: string
          format: password
          example: newPassword
      required:
        - password
        - password_confirmation
        - new_password
    DocumentType:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Archivo
    Document:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: credit note.pdf
        description:
          type: string
          example: document desciption example
        location:
          type: string
          format: url
          example: 'http://dixa.com/public/document.pdf'
        identifier:
          type: string
          example: '50478'
        tags:
          type: array
          items:
            type: string
          example:
            - note
            - invoice
            - legal
        creator:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: '2020-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-01-01T12:00:00Z'
        date:
          type: string
          format: date
          example: '2020-01-01'
        historical:
          type: array
          items:
            $ref: '#/components/schemas/History'
        share:
          type: array
          items:
            $ref: '#/components/schemas/User'
        type:
          $ref: '#/components/schemas/DocumentType'
        department:
          $ref: '#/components/schemas/Department'
        parent:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: credits
            location:
              type: string
              format: url
              example: 'http://dixa.com/public/credits'
              nullable: true
            identifier:
              type: string
              nullable: true
            creator:
              $ref: '#/components/schemas/User'
            createdAt:
              type: string
              format: date-time
              example: '2020-01-01T12:00:00Z'
            date:
              type: string
              format: date
              example: '2020-01-01'
            type:
              $ref: '#/components/schemas/DocumentType'
            typeName:
              type: string
              example: Carpeta
    DocumentSimple:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: credit note.pdf
        location:
          type: string
          format: url
          example: 'http://dixa.com/public/document.pdf'
        createdAt:
          type: string
          format: date-time
          example: '2020-01-01T12:00:00Z'
        date:
          type: string
          format: date
          example: '2020-01-01'
        type:
          $ref: '#/components/schemas/DocumentType'
        parent:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: credits
            location:
              type: string
              format: url
              example: 'http://dixa.com/public/credits'
              nullable: true
            createdAt:
              type: string
              format: date-time
              example: '2020-01-01T12:00:00Z'
            date:
              type: string
              format: date
              example: '2020-01-01'
            type:
              $ref: '#/components/schemas/DocumentType'
    Folder:
      type: object
      properties:
        name:
          type: string
          example: new-folder
        parent_id:
          type: integer
          example: 1
          nullable: true
      required:
        - name
    FileMultipartCreate:
      type: object
      properties:
        name:
          type: string
          example: credit note.pdf
        description:
          type: string
          example: document desciption example
        min_identifier:
          type: string
          example: '50478'
        max_identifier:
          type: string
          example: '50478'
          nullable: true
        date:
          type: string
          format: date
          example: '2020-01-01'
        file:
          type: string
          format: binary
        parent_id:
          type: integer
          example: 1
          nullable: true
      required:
        - name
        - description
        - min_identifier
        - date
        - file
    History:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: '2022-11-28T11:45:00Z'
        user:
          $ref: '#/components/schemas/User'
        action:
          $ref: '#/components/schemas/Action'
    Action:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Creado
    ShareDocumentPermission:
      type: object
      properties:
        name:
          type: string
          example: Lectura
    UserWithPermissionDocument:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        second_lastname:
          type: string
          example: Roblox
        image:
          type: string
          format: url
          example: 'https://s3.amazon/profile/46798a7fsd98f79asd8f7'
        role:
          $ref: '#/components/schemas/Role'
        department:
          $ref: '#/components/schemas/Department'
        permission:
          type: array
          items:
            $ref: '#/components/schemas/ShareDocumentPermission'
    UserSharePermissionByDocument:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 3
              permission:
                type: string
                example: Lectura
  parameters:
    userId:
      name: user_id
      in: path
      description: user id
      schema:
        type: integer
      required: true
    roleId:
      name: role_id
      in: path
      description: role id
      schema:
        type: integer
      required: true
    departmentId:
      name: department_id
      in: path
      description: department id
      schema:
        type: integer
      required: true
    documentId:
      name: document_id
      in: path
      description: document id
      schema:
        type: integer
      required: true
    page:
      in: query
      name: page
      description: page to query
      required: false
      schema:
        type: integer
        example: 1
    order:
      in: query
      name: order
      description: 'sort type, descending or ascending'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
    sortBy:
      in: query
      name: sortBy
      description: field by which you want to sort
      required: false
      schema:
        type: string
        example: nombre
    perPage:
      in: query
      name: perPage
      description: number of items you want the response to return
      required: false
      schema:
        type: integer
        example: 20
    role:
      in: query
      name: role
      description: (role id) Value to filter the role type of the users
      required: false
      schema:
        type: integer
        example: 1
    name:
      in: query
      name: name
      description: Value to filter by full user name
      required: false
      schema:
        type: string
        example: John Doe
    parent:
      in: query
      name: parent
      description: (folder id) Value get files from parent folder
      required: false
      schema:
        type: integer
        example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '400':
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Bad Request
              success:
                type: boolean
                example: false
    '401':
      description: unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Unauthorized
              success:
                type: boolean
                example: false
    '403':
      description: Not authorized
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Forbidden
              success:
                type: boolean
                example: false
    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: Registro no encontrado
              success:
                type: boolean
                example: false
    '422':
      description: Error validation
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: El campo key_name es obligatorio
              success:
                type: boolean
                example: false
    '500':
      description: server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: string
                example: Error del servidor
              success:
                type: boolean
                example: false
security:
  - bearerAuth: []
